<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>collaboration | On Call Life</title>
    <link>/tags/collaboration/</link>
      <atom:link href="/tags/collaboration/index.xml" rel="self" type="application/rss+xml" />
    <description>collaboration</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 05 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>collaboration</title>
      <link>/tags/collaboration/</link>
    </image>
    
    <item>
      <title>Building a Serverless Status Page Solution</title>
      <link>/post/building-a-serverless-status-page-solution/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/building-a-serverless-status-page-solution/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://jhandcdn.blob.core.windows.net/blob/UpdateFromTeams.gif&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://jhandcdn.blob.core.windows.net/blob/UpdateFromTeams.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;tech-used&#34;&gt;Tech Used&lt;/h3&gt;
&lt;p&gt;The brains behind this solution is an Azure Function (running Node.js) that is triggered via outgoing webhook (from Microsoft Teams). The function modifies an index.html file stored in a &amp;ldquo;web server&amp;rdquo; served from a serverless SMB file share in Azure Storage.&lt;/p&gt;
&lt;p&gt;Users can &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;close&lt;/code&gt; &amp;ldquo;status updates&amp;rdquo; by invoking them from within a chat channel.&lt;/p&gt;
&lt;p&gt;The text that follows the command will be stored and displayed on the site below the colored (Red or Green) header.&lt;/p&gt;
&lt;p&gt;In addition to the website files, an Azure Table will be used for storing the history of each status update.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The table is not provisioned with the deployment script. It needs to be manually created in Step 2 below.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SignalR manages refreshing the client so that changes made to the HTML are immediately visible without any end user interaction.&lt;/p&gt;
&lt;p&gt;Application Insights is used to provide observability on the operation, behavior, and usage of the solution and is &amp;ldquo;best practice&amp;rdquo; for building highly available and reliable system&amp;hellip; which we expect from any Status Page solution.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;You will need an account with the following services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://cda.ms/16X&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://cda.ms/17f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Teams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;deployment-instructions&#34;&gt;Deployment Instructions&lt;/h3&gt;
&lt;p&gt;The blue button below will deploy all resources needed for this solution in to the Resource Group and Azure region of your choice. The name you choose also determines the URL used to view the Status Page as well as the incoming URL used to trigger updates.&lt;/p&gt;
&lt;h4 id=&#34;steps-to-deploy&#34;&gt;Steps To Deploy&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Create the Azure Function app, Storage account, and SignalR Service with this button: 
&lt;a href=&#34;https://azuredeploy.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://azuredeploy.net/deploybutton.png&#34; alt=&#34;Deploy to Azure&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This will begin deploying everything needed for the solution and will provide a link to the public facing URL of the Status Page as well as a link to your new resource group where you will continue with step 2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; In the Azure portal, open the Storage account and add a table named &lt;code&gt;statuses&lt;/code&gt;. You do not need to set any properties or add records.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jhandcdn.blob.core.windows.net/blob/CreateStatusesTable.gif&#34; alt=&#34;Create table&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Navigate to the function app, and open the &lt;code&gt;teams-webhook&lt;/code&gt; function. Click &amp;ldquo;Get Function URL&amp;rdquo; and copy the URL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Open the URL of the Function in a new tab. This is &amp;ldquo;Status Page&amp;rdquo; that will change automatically when updated. It is NOT the same as the &amp;ldquo;Get Function URL&amp;rdquo; used in the next step.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jhandcdn.blob.core.windows.net/blob/ReindeerGuidanceSystemURL.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Open Microsoft Teams and navigate to the &amp;ldquo;Apps&amp;rdquo; page of the team in which you want to create the bot. Click &amp;ldquo;Create outgoing webhook&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;StatusPage&lt;/code&gt; as the bot name (this is hardcoded, for now).&lt;/li&gt;
&lt;li&gt;Paste in the function URL, and enter a description and press the create button.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;You will be prompted with a secret code for validating webhook calls from Teams. We currently do not use this. Close the dialog box.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;a href=&#34;https://jhandcdn.blob.core.windows.net/blob/Webhook.gif&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://jhandcdn.blob.core.windows.net/blob/WebhookStatic.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; In Microsoft Teams, update the status page by typing &lt;code&gt;@StatusPage&lt;/code&gt; to summon the bot followed by &lt;code&gt;open We are experiencing a problem. Standby for more information&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Available commands are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bot&#34;&gt;        @StatusPage open [message]
        @StatusPage update [message]
        @StatusPage close [message]
        @StatusPage help`
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;This solution is based on the on-stage demonstrations built for Microsoft Ignite The Tour.&lt;/p&gt;
&lt;p&gt;To learn more about the full demonstration, view the repo for &amp;ldquo;
&lt;a href=&#34;https://myignite.techcommunity.microsoft.com/sessions/82997/?WT.mc_id=oncalllife-blog-jahand&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OPS20 - Responding To Incidents&lt;/a&gt;&amp;quot;. Huge Thanks to 
&lt;a href=&#34;https://github.com/anthonychu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Anthony Chu&lt;/a&gt; in bringing this to life.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s move on to

&lt;a href=&#34;/post/understanding-why-we-learn-from-incidents/&#34;&gt;Understanding Why We Learn From Incidents&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Identifying the Subject Matter Experts</title>
      <link>/post/identifying-the-subject-matter-experts/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/identifying-the-subject-matter-experts/</guid>
      <description>&lt;p&gt;It’s quite common within on-call rosters to identify subject matter experts, so that early responders know who to escalate too quickly. These people should not be on call all the time, of course, but we do want to be able to identify who is our database expert. Who is our front-end expert? Who are the people that we can reach out to if our primary and secondary responders are not able to diagnose and resolve the issue themselves?&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;/post/establishing-oncall-rosters&#34;&gt;Establishing On-call Rosters&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Managing Tasks from Group Chat - ChatOps</title>
      <link>/post/managing-tasks-from-group-chat-chatops/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/managing-tasks-from-group-chat-chatops/</guid>
      <description>&lt;p&gt;Chatops is the use of tools from within a group chat tool.&lt;/p&gt;
&lt;p&gt;One great example of Chatops is when engineers can update important information regarding an incident to a broader audience, possibly even to affected users.&lt;/p&gt;
&lt;p&gt;Allowing people to quickly update stakeholders by typing a few quick commands from within the same environment as the related conversations has a number of clear benefits.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at 
&lt;a href=&#34;/post/building_a_serverless_status_page_solution/&#34;&gt;Building a Serverless Status Page Solution with Azure Functions, blob storage, and Microsoft Teams&lt;/a&gt; to illustrate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Supplying Context and Guidance</title>
      <link>/post/supplying-context-and-guidance/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/supplying-context-and-guidance/</guid>
      <description>&lt;p&gt;During an active incident, it&amp;rsquo;s often difficult to recall information such as system names, IP addresses, admin logins, location of logs, and more. Remembering where to find dasbhoards, metrics, and reports that could be helpful is often difficult.&lt;/p&gt;
&lt;p&gt;To build a proactive response plan to managing incidents it&amp;rsquo;s important to provide some useful context and guidance for the first responders to begin investigating, triaging, and escalating.&lt;/p&gt;
&lt;p&gt;Where should the first responder start? Is there a dashboard that provides a good representation of the health of the system from the customer&amp;rsquo;s perspective? Do responders know how to access it? Does it require a login? Can it be viewed from a mobile device, remotely? These are all considerations for making it easier for on-call responders to begin restoring service as quickly as possible.&lt;/p&gt;
&lt;p&gt;Typically, first responders will need the assistance of others with additional expertise and experience. Or maybe just a second pair of eyes. Understanding how on-call engineers should escalate incidents, helps cut out any delay should exacerbated engineers need to reach out for assistance.&lt;/p&gt;
&lt;p&gt;When discussing incident response tacticcs, ask yourselves what metrics, tools, links or general resources might be helpful in those early moments?&lt;/p&gt;
&lt;p&gt;Once we&amp;rsquo;ve answered that question we can begin building resources in a non-prescriptive way. Objective data and tools that can be provided to help assist in the efforts to fix the problems.&lt;/p&gt;
&lt;p&gt;Often &amp;ldquo;Runbooks&amp;rdquo; (or playbooks) serve this purpose, automating some of the remediation steps that are known to help recover from the problem.&lt;/p&gt;
&lt;p&gt;Automation can be helpful in many ways during an incident. However, tools that provide context and guidance to allow engineers to make their own decisions towards next actions are meant to be more guides than anything.&lt;/p&gt;
&lt;p&gt;Next, let&amp;rsquo;s look at 
&lt;a href=&#34;/post/building-troubleshooting-guides-in-azure-monitor/&#34;&gt;Building Troubleshooting Guides in Azure Monitor&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Why We Learn From Incidents</title>
      <link>/post/understanding-why-we-learn-from-incidents/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/understanding-why-we-learn-from-incidents/</guid>
      <description>&lt;p&gt;Incident response doesn’t stop when the incident is over. They say those who
don’t study history are doomed to repeat it. Likewise, those who don’t study,
analyze, and learn from the incidents they resolved are doomed to keep repeating
the process, as well.&lt;/p&gt;
&lt;p&gt;Your most important means of learning from incidents is the post-incident
review.&lt;/p&gt;
&lt;p&gt;When an incident occurs, your first reaction probably isn’t, “Hurray – a
learning opportunity!” Your immediate priority is figuring out what went wrong
and fixing it as quickly as possible, to reduce the impact on your customers and
end users – as it should be.&lt;/p&gt;
&lt;p&gt;However, once the incident has been resolved, it’s important to follow up and
benefit from the discovery of whatever mistakes or circumstances led to the
failure. Doing so will help you prevent the same thing from happening again and
will also help you understand what tactics do and don’t work best when
responding to any kind of incident in the future.&lt;/p&gt;
&lt;p&gt;The post-incident review is part of the analysis phase of the incident response
lifecycle. Not all post-incident reviews are created equal. There are different
ways to approach the process, and too much focus on certain aspects of the
problem or framing questions in the wrong way can reduce the value of the
review.&lt;/p&gt;
&lt;p&gt;We want to now explore the best path towards generating actionable introspection about the systems we co-create.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;/post/understanding-how-complex-systems-fail/&#34;&gt;Understanding How Complex Systems Fail&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updating Stakeholders</title>
      <link>/post/updating-stakeholders/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/updating-stakeholders/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s important that internal teams are aware of what&amp;rsquo;s happening when an incident occurs. If we don’t provide consistent updates, stakeholders will start coming around and asking.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also important to acknowledge awareness, status, and expectations to stakeholders beyond the internal groups of an organization. Customers, users, fans, and anyone relying on the availability of your service will want to know what&amp;rsquo;s going on when an incident begins to impact them.&lt;/p&gt;
&lt;p&gt;They have every right to this information, but we&amp;rsquo;ve got to find a better way to make them aware of an issue and what is being done about it.&lt;/p&gt;
&lt;h2 id=&#34;acknowledgement&#34;&gt;Acknowledgement&lt;/h2&gt;
&lt;p&gt;Just letting others know that someone is aware of the situation and &amp;ldquo;on it&amp;rdquo; can go a long way in easing the anxiety of others who may be impacted by an incident. Hearing from the provider themselves that an issue has been detected and is being investigated is almost always enough to satisfy customers and users when they first discover something isn&amp;rsquo;t working as expected.&lt;/p&gt;
&lt;p&gt;When customers are aware of an issue and it&amp;rsquo;s not clear if the provider knows about it or is doing anything it can sour the relationship.&lt;/p&gt;
&lt;p&gt;Simply acknowledging an incident provides context to everyone else that action is taking place.&lt;/p&gt;
&lt;p&gt;Once we have acknowledge awareness of an incident we need to begin providing additional information as it becomes available. In early moments and minutes of an incident it may not be clear what the problem (or problems) is.&lt;/p&gt;
&lt;p&gt;Even if there isn&amp;rsquo;t any information to share yet, that in and of itself is the message that should be communicated. It&amp;rsquo;s important to be clear in what is known and not known.&lt;/p&gt;
&lt;h2 id=&#34;clear&#34;&gt;Clear&lt;/h2&gt;
&lt;p&gt;We should be clear in presenting what we know, what is being done and what kind of expectations should they have in terms of when they&amp;rsquo;re going to hear back from us?&lt;/p&gt;
&lt;h2 id=&#34;expectations&#34;&gt;Expectations&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;/post/managing-tasks-from-group-chat-chatops/&#34;&gt;ChatOps&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
